# spamgourmet config file
# local domains array is needed for checking users' forwarding addresses to make sure
# they don't create mail loops (not that they would...)
 %localdomains = (
 'example.com' => 1,
 'example.net' => 1
 );

## set the 'admin domain' to be that which "official" messages (to abuse
## postmaster, info, etc.) are accepted.  By restricting such messages
## to a single domain, you cut down on spam to the admins :)
 $admindomain = 'example.com';


## set the database connect string, the database username, and the database password
## (remember to make this script readable only by the process that will run it
  $dbstring = 'DBI:mysql:database=dbname;host=localhost';
  $dbuser = 'dbuser';
  $dbpassword = 'dbpassword';


# use these variables to indicate whether debug statements should be output 
  $debugmode = 1; # 1 for on, 0 for off
  $debugfilename = '/path/to/debug.txt'; # full path to debug output file

## this setting determines which class will be used to send email
## currently distributed choices are:
## Mail::Spamgourmet::CommandLineMailer
## Mail::Spamgourmet::SocketMailer

  $mailerclass = 'Mail::Spamgourmet::CommandLineMailer';


## path to sendmail, or a reasonable substitute - used by
## Mail::Spamgourmet::CommandLineMailer
## The two most inefficient things about this routine are that
## it uses sendmail to receive the messages and another sendmail instance
## to send them.  It would be much better to integrate this routine
## into a standalone mail server.  The advantage of this inefficent way
## is that you don't need root to run it

  $mailprogram = '/usr/sbin/sendmail';

## these delimiters (separated by a | symbol) will
## be used to mark the boundaries of the components
## of a spamgourmet address. They are alternatives
## (eg, a . or a ~ or something else -- the | means
## "or"), and they must be email address RFC compliant
## - that is, it must be valid to use them in an
## email address. You must escape (with a backslash)
## the period ( use \. instead of .)

  $delimiters = '\.|~';


  $websessiontimeout = 6000; # default timeout in seconds
  $webapproot = '/path/to/web/';
  $webtemplatedir = '/path/to/templates/';


  $directorydelimiter = '/';
  $uselocalfilecache = 1;
  $localfilecachetimeout = 30; # seconds to time out local file caches
  $secretphrase = 'a very secret phrase';
  $captchagenhost = 'localhost';  #set this to empty ( '' ) to disable captcha
  $captchagenport = 15678;
  $dictionaryfile = $webtemplatedir . 'dictionary';


## hostname of a friendly SMTP server for sending mail
## (used by Mail::Spamgourmet::SocketMailer and others)
  $mailhost = 'localhost';

## set this to 1 if you want to use the local unix user accounts instead of
## storing user accounts in the database
  $useunixaccounts = 0;

## admin email address receives messages to 'info'
## currently hardcoded - could come out of the db
## so that 'root' could to to one person, 'abuse' another, etc.
  $adminemail = 'admin@example.com';

# otherdomain email - address from which messages sent to other domains arrive
# this is used for those domains which can't do a straight user alias  
  $otherdomainemail = 'spameater@example.com';

## for date expiring disposable addresses, this is the
## maximum period of validity, in seconds
## (hint, 1 day is 86400 seconds, 1 week is 604800
## and 4 weeks is 2419200
  $maxexpireperiod = 2419200;

# for deleted message logging, this is the number of
# most recently deleted messages to log for each user (max 3 with current db config)  
  $numberofeatenmessagestolog = 3;

# These variables establish how many messages
# a user is allowed to receive or send during
# the specified interval period (in seconds)
  $recthrottleinterval = 3600;
  $maxreccount = 100;
  $recthrottleoffperiod = 28800;
  $sendthrottleinterval = 3600;
  $maxsendcount = 50;

1; # return 1
